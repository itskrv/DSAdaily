class Solution {

    void lpsfind(vector<int> &lps, string n){
        int pre=0,suff=1;
        while(suff<n.size()){
            if(n[pre]==n[suff]){
                lps[suff]=pre+1;
                pre++,suff++;
            }
            else{
                if(pre==0){
                    lps[suff]=0;
                    suff++;
                }
                else
                pre=lps[pre-1];
            }
        }
    }

    int KMP_MATCH(string haystack, string needle){
     
     vector<int>lps(needle.size(),0);
     lpsfind(lps,needle);
     int first=0,second=0;
     while(second<needle.size() && first<haystack.size()){
        
         if(needle[second]==haystack[first])
         second++,first++;

         else{ 
           if(second==0)
           first++;
           else
           second=lps[second-1];
           }
         }
 
      if(second==needle.size())
      return 1;

      return -1;

    }
public:
    int repeatedStringMatch(string a, string b) {
        if(a==b)
        return 1;

        int repeat=1;
        string temp=a;
        while(temp.size()<b.size()){
            temp+=a;
            repeat++;
        }
        // KMP pattern match
        if(KMP_MATCH(temp,b)==1)
        return repeat;
        // temp+a KMP match
        if(KMP_MATCH(temp+a,b)==1)
        return repeat+1;

        return -1;

    }
};
