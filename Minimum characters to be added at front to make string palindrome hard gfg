class Solution {
public:
    int minChar(string str){
        // string reverse
        string rev=str;
        reverse(rev.begin(),rev.end());
        int size=str.size();
        str+='$'; // seprator
        str+=rev;
        
        // calculate longest prefix palindrome
        
        int n= str.size();
        
        vector<int>lps(n,0);
        int pre=0,suff=1;
        while(suff<str.size()){
            
            if(str[pre]==str[suff]){
                lps[suff]=pre+1;
                pre++,suff++;
            }
            else{
                if(pre==0){
                    lps[suff]=0;
                    suff++;
                }
                else
                pre=lps[pre-1];
            }
        }
        
        return size-lps[n-1];
    }
};


//{ Driver Code Starts.
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    string str;
	    cin >> str;
	    Solution ob;
	    int ans = ob.minChar(str);
	    cout << ans<<endl;
	}
	return 0;
}

// } Driver Code Ends
